/* lock_files.hpp
Compatibility read-write lock
(C) 2016 Niall Douglas http://www.nedprod.com/
File Created: April 2016


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef BOOST_AFIO_SHARED_FS_MUTEX_LOCK_FILES_HPP
#define BOOST_AFIO_SHARED_FS_MUTEX_LOCK_FILES_HPP

#include "../../file_handle.hpp"
#include "base.hpp"

BOOST_AFIO_V2_NAMESPACE_BEGIN

namespace algorithm
{
  namespace shared_fs_mutex
  {
    /*! \class lock_files
    \brief Many entity exclusive compatibility file system based lock

    This is a very simple many entity shared mutex likely to work almost anywhere without surprises.
    It works by trying to exclusively create a file called the hex of the entity id. If it fails to
    exclusively create any file, it deletes all previously created files, randomises the order
    and tries locking them again until success. The only real reason to use this implementation
    is its excellent compatibility with almost everything, most users will want byte_ranges instead.

    - Compatible with all networked file systems.
    - Exponential complexity to number of entities being concurrently locked.

    Caveats:
    - No ability to sleep until a lock becomes free, so CPUs are spun at 100%.
    - On POSIX sudden process exit with locks held will deadlock all other users by leaving stale
    files around.
    - Costs a file descriptor per entity locked.
    - Sudden power loss during use will deadlock first user after reboot, again due to stale files.
    - Currently this implementation does not permit more than one lock() per instance as the lock
    information is stored as member data. Creating multiple instances referring to the same path
    works fine. This could be fixed easily, but it would require a memory allocation per lock and
    user demand that this is actually a problem in practice.
    - Leaves many 16 character long hexadecimal named files in the supplied directory which may
    confuse users. Tip: create a hidden lockfile directory.

    Fixing the stale lock file problem could be quite trivial - simply byte range lock the first byte
    in the lock file to detect when a lock file is stale. However in this situation using the
    byte_ranges algorithm would be far superior, so implementing stale lock file clean up is left up
    to the user.
    */
    class lock_files : public shared_fs_mutex
    {
      file_handle::path_type _path;
      std::vector<file_handle> _hs;

      lock_files(file_handle::path_type &&o)
          : _path(std::move(o))
      {
      }
      lock_files(const lock_files &) = delete;
      lock_files &operator=(const lock_files &) = delete;

    public:
      //! The type of an entity id
      using entity_type = shared_fs_mutex::entity_type;
      //! The type of a sequence of entities
      using entities_type = shared_fs_mutex::entities_type;

      //! Move constructor
      lock_files(lock_files &&o) noexcept : _path(std::move(o._path)), _hs(std::move(o._hs)) {}
      //! Move assign
      lock_files &operator=(lock_files &&o) noexcept
      {
        _path = std::move(o._path);
        _hs = std::move(o._hs);
        return *this;
      }

      //! Initialises a shared filing system mutex using the directory at \em lockdir
      //[[bindlib::make_free]]
      static result<lock_files> fs_mutex_lock_files(file_handle::path_type lockdir) noexcept
      {
        BOOST_AFIO_LOG_FUNCTION_CALL(0);
        return lock_files(std::move(lockdir));
      }

      //! Return the path to the directory being used for this lock
      const file_handle::path_type &path() const noexcept { return _path; }

    protected:
      virtual result<void> _lock(entities_guard &out, deadline d, bool spin_not_sleep) noexcept override final
      {
        BOOST_AFIO_LOG_FUNCTION_CALL(this);
        stl11::chrono::steady_clock::time_point began_steady;
        stl11::chrono::system_clock::time_point end_utc;
        if(d)
        {
          if((d).steady)
            began_steady = stl11::chrono::steady_clock::now();
          else
            end_utc = (d).to_time_point();
        }
        size_t n;
        // Create a set of paths to files to exclusively create
        std::vector<fixme_path> entity_paths(out.entities.size());
        for(n = 0; n < out.entities.size(); n++)
        {
          auto v = out.entities[n].value;
          entity_paths[n] = _path / utils::to_hex_string(span<char>((char *) &v, 8));
        }
        _hs.resize(out.entities.size());
        do
        {
          {
            auto undo = detail::Undoer([&] {
              for(; n != (size_t) -1; n--)
              {
                _hs[n].close();  // delete on close semantics deletes the file
              }
            });
            for(n = 0; n < out.entities.size(); n++)
            {
              auto ret = file_handle::file(entity_paths[n], file_handle::mode::write, file_handle::creation::only_if_not_exist, file_handle::caching::temporary, file_handle::flag::delete_on_close);
              if(ret.has_error())
              {
                const auto &ec = ret.get_error();
                if(ec.category() != std::generic_category() || (ec.value() != EAGAIN && ec.value() != EEXIST))
                  return ret.get_error();
                // Collided with another locker
                break;
              }
              _hs[n] = std::move(ret.get());
            }
            if(n == out.entities.size())
              undo.dismiss();
          }
          if(n != out.entities.size())
          {
            if(d)
            {
              if((d).steady)
              {
                if(stl11::chrono::steady_clock::now() >= (began_steady + stl11::chrono::nanoseconds((d).nsecs)))
                  return make_errored_result<void>(ETIMEDOUT);
              }
              else
              {
                if(stl11::chrono::system_clock::now() >= end_utc)
                  return make_errored_result<void>(ETIMEDOUT);
              }
            }
            // Randomise out.entities
            std::random_shuffle(out.entities.begin(), out.entities.end());
            // Sleep for a very short time
            if(!spin_not_sleep)
              std::this_thread::yield();
          }
        } while(n < out.entities.size());
        return make_result<void>();
      }

    public:
      virtual void unlock(entities_type, void *) noexcept override final
      {
        BOOST_AFIO_LOG_FUNCTION_CALL(this);
        for(auto &i : _hs)
        {
          i.close();  // delete on close semantics deletes the file
        }
      }
    };

  }  // namespace
}  // namespace

BOOST_AFIO_V2_NAMESPACE_END


#endif
