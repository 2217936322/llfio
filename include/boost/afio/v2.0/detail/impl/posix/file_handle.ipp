/* handle.hpp
A handle to something
(C) 2015 Niall Douglas http://www.nedprod.com/
File Created: Dec 2015


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#include "../../../handle.hpp"

#include <fcntl.h>
#include <unistd.h>

BOOST_AFIO_V2_NAMESPACE_BEGIN

// allocate at process start to ensure later failure to allocate won't cause failure
static fixme_path temporary_files_directory_("/tmp/no_temporary_directories_accessible");
const fixme_path &fixme_temporary_files_directory() noexcept
{
  static struct temporary_files_directory_done_
  {
    temporary_files_directory_done_()
    {
      try
      {
        fixme_path::string_type buffer;
        auto testpath = [&]() {
          size_t len = buffer.size();
          if(buffer[len - 1] == '/')
            buffer.resize(--len);
          buffer.append("/afio_tempfile_probe_file.tmp");
          int h = open(buffer.c_str(), O_WRONLY|O_CREAT, 0666);
          if(-1 != h)
          {
            unlink(buffer.c_str());
            close(h);
            buffer.resize(len);
            temporary_files_directory_ = std::move(buffer);
            return true;
          }
          return false;
        };
        // Note that XDG_RUNTIME_DIR is the systemd runtime directory for the current user
        static const char *variables[] = {"TMPDIR", "TMP", "TEMP", "TEMPDIR", "XDG_RUNTIME_DIR"};
        for(size_t n = 0; n < sizeof(variables) / sizeof(variables[0]); n++)
        {
          const char *env = getenv(variables[n]);
          if(env)
          {
            buffer.assign(env);
            if(testpath())
              return;
          }
        }
        // If everything earlier failed e.g. if our environment block is zeroed,
        // fall back to /tmp and then /var/tmp, the last of which should succeed even if tmpfs is not mounted
        buffer.assign("/tmp");
        if(testpath())
          return;
        buffer.assign("/var/tmp");
        if(testpath())
          return;
        // If even no system tmp directory is available, as a hail mary try $HOME
        static const char *variables2[] = {"HOME"};
        for(size_t n = 0; n < sizeof(variables2) / sizeof(variables2[0]); n++)
        {
          const char *env = getenv(variables2[n]);
          if(env)
          {
            buffer.assign(env);
            if(testpath())
              return;
          }
        }
      }
      catch(...)
      {
      }
    }
  } init;
  return temporary_files_directory_;
}

inline result<int> attribs_from_handle_mode_caching_and_flags(native_handle_type &nativeh, file_handle::mode _mode, file_handle::creation _creation, file_handle::caching _caching, file_handle::flag flags) noexcept
{
  int attribs = 0;
  switch(_mode)
  {
  case mode::unchanged:
    return make_errored_result<file_handle>(stl11::errc::invalid_argument);
  case mode::none:
    break;
  case mode::attr_read:
  case mode::read:
    attribs = O_RDONLY;
    nativeh.behaviour |= native_handle_type::disposition::seekable | native_handle_type::disposition::readable;
    break;
  case mode::attr_write:
  case mode::write:
    attribs = O_RDWR;
    nativeh.behaviour |= native_handle_type::disposition::seekable | native_handle_type::disposition::readable | native_handle_type::disposition::writable;
    break;
  case mode::append:
    attribs = O_APPEND;
    nativeh.behaviour |= native_handle_type::disposition::writable | native_handle_type::disposition::append_only;
    break;
  }
  switch(_creation)
  {
  case creation::open_existing:
    break;
  case creation::only_if_not_exist:
    attribs |= O_CREAT | O_EXCL;
    break;
  case creation::if_needed:
    attribs |= O_CREAT;
    break;
  case creation::truncate:
    attribs |= O_TRUNC;
    break;
  }
  switch(_caching)
  {
  case caching::unchanged:
    return make_errored_result<file_handle>(stl11::errc::invalid_argument);
  case caching::none:
    attribs |= O_SYNC | O_DIRECT;
    nativeh.behaviour |= native_handle_type::disposition::aligned_io;
    break;
  case caching::only_metadata:
    attribs |= O_DIRECT;
    nativeh.behaviour |= native_handle_type::disposition::aligned_io;
    break;
  case caching::reads:
    attribs |= O_SYNC;
    break;
  case caching::reads_and_metadata:
#ifdef O_DSYNC
    attribs |= O_DSYNC;
#else
    attribs |= O_SYNC;
#endif
    break;
  case caching::all:
  case caching::safety_fsyncs:
  case caching::temporary:
    break;
  }
}

result<void> file_handle::_fetch_inode() noexcept
{
  stat_t s;
  BOOST_OUTCOME_TRYV(s.fill(*this, stat_t::want::dev|stat_t::want::ino));
  _devid = s.st_dev;
  _inode = s.st_ino;
  return make_valued_result<void>();
}

inline result<void> check_inode(const file_handle &h) noexcept
{
  stat_t s;
  BOOST_OUTCOME_TRYV(s.fill(h, stat_t::want::dev|stat_t::want::ino));
  if(s.st_dev != h.st_dev() || s.st_ino != h.st_ino())
    return make_errored_result<void>(stl11::errc::no_such_file_or_directory);
  return make_valued_result<void>();
}

result<file_handle> file_handle::file(file_handle::path_type _path, file_handle::mode _mode, file_handle::creation _creation, file_handle::caching _caching, file_handle::flag flags) noexcept
{
  result<file_handle> ret(file_handle(std::move(_path), native_handle_type(), _caching, flags));
  native_handle_type &nativeh = ret.get()._v;
  BOOST_OUTCOME_TRY(attribs, attribs_from_handle_mode_caching_and_flags(nativeh, _mode, _creation, _caching, flags));
  nativeh.behaviour |= native_handle_type::disposition::file;
  const char *path_ = ret.value()._path.c_str();
  nativeh.fd = ::open(path_, attribs, 0x1b0 /*660*/);
  if(-1 == nativeh.fd)
    return make_errored_result<file_handle>(errno, last190(ret.value()._path));
  BOOST_AFIO_LOG_FUNCTION_CALL(nativeh.fd);
  if(!(flags & disable_safety_unlinks))
  {
    BOOST_OUTCOME_TRYV(_fetch_inode());
  }
  if(_creation == creation::truncate && ret.value().are_safety_fsyncs_issued())
    fsync(nativeh.fd);
  return ret;
}

result<file_handle> file_handle::temp_inode(path_type dirpath, mode _mode, flag flags) noexcept
{
  caching _caching = caching::temporary;
  // No need to rename to random on unlink or check inode before unlink
  flags |= flag::unlink_on_close | flag::disable_safety_unlinks;
  result<file_handle> ret(file_handle(path_type(), native_handle_type(), _caching, flags));
  native_handle_type &nativeh = ret.get()._v;
  // Open file exclusively to prevent collision
  BOOST_OUTCOME_TRY(attribs, attribs_from_handle_mode_caching_and_flags(nativeh, _mode, creation::only_if_not_exist, _caching, flags));
  nativeh.behaviour |= native_handle_type::disposition::file;
#ifdef O_TMPFILE
  // Linux has a special flag just for this use case
  attribs|=O_TMPFILE;
  attribs&=~O_EXCL;  // allow relinking later
  const char *path_ = ret.value()._path.c_str();
  nativeh.fd = ::open(path_, attribs, 0600);
  if(-1 != nativeh.fd)
  {
    BOOST_OUTCOME_TRYV(_fetch_inode());  // It can be useful to know the inode of temporary inodes
    return ret;
  }
  // If it failed, assume this kernel or FS doesn't support O_TMPFILE
  attribs&=~O_TMPFILE;
  attribs|=O_EXCL;
#endif
  for(;;)
  {
    try
    {
      ret.value()._path = dirpath / (utils::random_string(32) + ".tmp");
    }
    BOOST_OUTCOME_CATCH_ALL_EXCEPTION_TO_RESULT
    const char *path_ = ret.value()._path.c_str();
    nativeh.fd = ::open(path_, attribs, 0600);  // user read/write perms only
    if(-1 == nativeh.fd)
    {
      int errcode = errno;
      if(EEXIST == errcode)
        continue;
      BOOST_AFIO_LOG_FUNCTION_CALL(0);
      return make_errored_result<file_handle>(errcode);
    }
    BOOST_AFIO_LOG_FUNCTION_CALL(nativeh.fd);
    // Immediately unlink after creation
    if(-1 == ::unlink(path_))
      return make_errored_result<file_handle>(errno);
    BOOST_OUTCOME_TRYV(_fetch_inode());  // It can be useful to know the inode of temporary inodes
    return ret;
  }
}

result<file_handle> file_handle::clone() const noexcept
{
  BOOST_AFIO_LOG_FUNCTION_CALL(_v.fd);
  result<file_handle> ret(file_handle(native_handle_type(), _path, _devid, _inode, _caching, _flags));
  ret.value()._v.behaviour = _v.behaviour;
  ret.value()._v.fd = ::dup(_v.fd);
  if(-1 == ret.value()._v.fd)
    return make_errored_result<file_handle>(errno, last190(_path));
  return ret;
}

result<file_handle::path_type> file_handle::relink(path_type newpath) noexcept
{
  BOOST_AFIO_LOG_FUNCTION_CALL(_v.fd);
  if(newpath.is_relative())
    newpath = _path.parent_path() / newpath;
#ifdef O_TMPFILE
  // If the handle was created with O_TMPFILE, we need a different approach
  if(_path.empty() && (_caching & caching::temporary))
  {
    char path[PATH_MAX];
    snprintf(path, PATH_MAX, "/proc/self/fd/%d", _v.fd);
    if(-1 == ::linkat(AT_FDCWD, path, AT_FDCWD, newpath.c_str(), AT_SYMLINK_FOLLOW))
      return make_errored_result<path_type>(errno);
  }
  else
#endif
  {
    // FIXME: As soon as we implement fat paths, make this race free
    if(!(flags & disable_safety_unlinks))
    {
      BOOST_OUTCOME_TRYV(verify_inode(*this));
    }
    if(-1 == ::rename(_path.c_str(), newpath.c_str()))
      return make_errored_result<path_type>(errno, last190(_path));
  }
  _path = std::move(newpath);
  return _path;
}

result<void> file_handle::unlink() noexcept
{
  BOOST_AFIO_LOG_FUNCTION_CALL(_v.fd);
  // FIXME: As soon as we implement fat paths, make this race free
  if(!(flags & disable_safety_unlinks))
  {
    BOOST_OUTCOME_TRYV(verify_inode(*this));
  }
  if(-1 == ::rename(_path.c_str(), newpath.c_str()))
    return make_errored_result<path_type>(errno, last190(_path));
  _path.clear();
  return make_valued_result<void>();
}

result<file_handle::extent_type> file_handle::length() const noexcept
{
  BOOST_AFIO_LOG_FUNCTION_CALL(_v.fd);
  struct stat_t s;
  memset(&s, 0, sizeof(s));
  if(-1 == ::fstat(_v.fd, &s))
    return make_errored_result<file_handle::extent_type>(errno, last190(_path));
  return s.st_size;
}

result<file_handle::extent_type> file_handle::truncate(file_handle::extent_type newsize) noexcept
{
  BOOST_AFIO_LOG_FUNCTION_CALL(_v.fd);
  if(ftruncate(_v.fd, newsize) < 0)
    return make_errored_result<extent_type>(errno, last190(_path));
  if(are_safety_fsyncs_issued())
  {
    fsync(_v.fd);
  }
  return newsize;
}

BOOST_AFIO_V2_NAMESPACE_END
